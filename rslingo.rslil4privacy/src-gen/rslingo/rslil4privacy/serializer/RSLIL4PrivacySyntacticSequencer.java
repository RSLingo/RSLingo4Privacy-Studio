/*
 * generated by Xtext
 */
package rslingo.rslil4privacy.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import rslingo.rslil4privacy.services.RSLIL4PrivacyGrammarAccess;

@SuppressWarnings("all")
public class RSLIL4PrivacySyntacticSequencer extends AbstractSyntacticSequencer {

	protected RSLIL4PrivacyGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Attribute_CommaKeyword_6_q;
	protected AbstractElementAlias match_Recipient_Recipient_PartKeyword_7_0_q;
	protected AbstractElementAlias match_Service_Service_PartKeyword_7_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (RSLIL4PrivacyGrammarAccess) access;
		match_Attribute_CommaKeyword_6_q = new TokenAlias(false, true, grammarAccess.getAttributeAccess().getCommaKeyword_6());
		match_Recipient_Recipient_PartKeyword_7_0_q = new TokenAlias(false, true, grammarAccess.getRecipientAccess().getRecipient_PartKeyword_7_0());
		match_Service_Service_PartKeyword_7_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getService_PartKeyword_7_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Attribute_CommaKeyword_6_q.equals(syntax))
				emit_Attribute_CommaKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Recipient_Recipient_PartKeyword_7_0_q.equals(syntax))
				emit_Recipient_Recipient_PartKeyword_7_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Service_Service_PartKeyword_7_0_q.equals(syntax))
				emit_Service_Service_PartKeyword_7_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING '}' (ambiguity) (rule end)
	 */
	protected void emit_Attribute_CommaKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Recipient_Part'?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING (ambiguity) 'Scope' scope='External'
	 *     description=STRING (ambiguity) 'Scope' scope='Internal'
	 *     description=STRING (ambiguity) 'Scope' scope='Internal/External'
	 */
	protected void emit_Recipient_Recipient_PartKeyword_7_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Service_Part'?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING (ambiguity) '}' (rule end)
	 *     refPDAll='All' (ambiguity) '}' (rule end)
	 *     refPrivateData=RefPrivateData (ambiguity) '}' (rule end)
	 *     serviceName=STRING (ambiguity) '}' (rule end)
	 */
	protected void emit_Service_Service_PartKeyword_7_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
