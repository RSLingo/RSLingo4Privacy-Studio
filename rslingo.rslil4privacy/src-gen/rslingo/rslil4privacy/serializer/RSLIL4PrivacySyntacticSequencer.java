/*
 * generated by Xtext
 */
package rslingo.rslil4privacy.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import rslingo.rslil4privacy.services.RSLIL4PrivacyGrammarAccess;

@SuppressWarnings("all")
public class RSLIL4PrivacySyntacticSequencer extends AbstractSyntacticSequencer {

	protected RSLIL4PrivacyGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Attribute_CommaKeyword_6_q;
	protected AbstractElementAlias match_Collection_RefersToEnforcementKeyword_10_0_q;
	protected AbstractElementAlias match_Collection_RefersToPrivateDataKeyword_8_0_q;
	protected AbstractElementAlias match_Collection_RefersToServiceKeyword_9_0_q;
	protected AbstractElementAlias match_Disclosure_RefersToEnforcementKeyword_13_0_q;
	protected AbstractElementAlias match_Disclosure_RefersToPrivateDataKeyword_11_0_q;
	protected AbstractElementAlias match_Disclosure_RefersToRecipientKeyword_8_0_q;
	protected AbstractElementAlias match_Disclosure_RefersToRecipientSourceKeyword_9_0_q;
	protected AbstractElementAlias match_Disclosure_RefersToRecipientTargetKeyword_10_0_q;
	protected AbstractElementAlias match_Disclosure_RefersToServiceKeyword_12_0_q;
	protected AbstractElementAlias match_Informative_RefersToEnforcementKeyword_10_0_q;
	protected AbstractElementAlias match_Informative_RefersToPrivateDataKeyword_8_0_q;
	protected AbstractElementAlias match_Informative_RefersToServiceKeyword_9_0_q;
	protected AbstractElementAlias match_RecipientPart_CommaKeyword_1_q;
	protected AbstractElementAlias match_Recipient_Recipient_PartKeyword_7_0_q;
	protected AbstractElementAlias match_RefEnforcement_CommaKeyword_1_q;
	protected AbstractElementAlias match_RefPrivateData_CommaKeyword_1_q;
	protected AbstractElementAlias match_RefRecipientSource_CommaKeyword_1_q;
	protected AbstractElementAlias match_RefRecipientTarget_CommaKeyword_1_q;
	protected AbstractElementAlias match_RefRecipient_CommaKeyword_1_q;
	protected AbstractElementAlias match_RefService_CommaKeyword_1_q;
	protected AbstractElementAlias match_Retention_RefersToEnforcementKeyword_12_0_q;
	protected AbstractElementAlias match_Retention_RefersToPrivateDataKeyword_10_0_q;
	protected AbstractElementAlias match_Retention_RefersToServiceKeyword_11_0_q;
	protected AbstractElementAlias match_ServicePart_CommaKeyword_1_q;
	protected AbstractElementAlias match_Service_RefersToPrivateDataKeyword_6_0_q;
	protected AbstractElementAlias match_Service_Service_PartKeyword_7_0_q;
	protected AbstractElementAlias match_Usage_RefersToEnforcementKeyword_10_0_q;
	protected AbstractElementAlias match_Usage_RefersToPrivateDataKeyword_8_0_q;
	protected AbstractElementAlias match_Usage_RefersToServiceKeyword_9_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (RSLIL4PrivacyGrammarAccess) access;
		match_Attribute_CommaKeyword_6_q = new TokenAlias(false, true, grammarAccess.getAttributeAccess().getCommaKeyword_6());
		match_Collection_RefersToEnforcementKeyword_10_0_q = new TokenAlias(false, true, grammarAccess.getCollectionAccess().getRefersToEnforcementKeyword_10_0());
		match_Collection_RefersToPrivateDataKeyword_8_0_q = new TokenAlias(false, true, grammarAccess.getCollectionAccess().getRefersToPrivateDataKeyword_8_0());
		match_Collection_RefersToServiceKeyword_9_0_q = new TokenAlias(false, true, grammarAccess.getCollectionAccess().getRefersToServiceKeyword_9_0());
		match_Disclosure_RefersToEnforcementKeyword_13_0_q = new TokenAlias(false, true, grammarAccess.getDisclosureAccess().getRefersToEnforcementKeyword_13_0());
		match_Disclosure_RefersToPrivateDataKeyword_11_0_q = new TokenAlias(false, true, grammarAccess.getDisclosureAccess().getRefersToPrivateDataKeyword_11_0());
		match_Disclosure_RefersToRecipientKeyword_8_0_q = new TokenAlias(false, true, grammarAccess.getDisclosureAccess().getRefersToRecipientKeyword_8_0());
		match_Disclosure_RefersToRecipientSourceKeyword_9_0_q = new TokenAlias(false, true, grammarAccess.getDisclosureAccess().getRefersToRecipientSourceKeyword_9_0());
		match_Disclosure_RefersToRecipientTargetKeyword_10_0_q = new TokenAlias(false, true, grammarAccess.getDisclosureAccess().getRefersToRecipientTargetKeyword_10_0());
		match_Disclosure_RefersToServiceKeyword_12_0_q = new TokenAlias(false, true, grammarAccess.getDisclosureAccess().getRefersToServiceKeyword_12_0());
		match_Informative_RefersToEnforcementKeyword_10_0_q = new TokenAlias(false, true, grammarAccess.getInformativeAccess().getRefersToEnforcementKeyword_10_0());
		match_Informative_RefersToPrivateDataKeyword_8_0_q = new TokenAlias(false, true, grammarAccess.getInformativeAccess().getRefersToPrivateDataKeyword_8_0());
		match_Informative_RefersToServiceKeyword_9_0_q = new TokenAlias(false, true, grammarAccess.getInformativeAccess().getRefersToServiceKeyword_9_0());
		match_RecipientPart_CommaKeyword_1_q = new TokenAlias(false, true, grammarAccess.getRecipientPartAccess().getCommaKeyword_1());
		match_Recipient_Recipient_PartKeyword_7_0_q = new TokenAlias(false, true, grammarAccess.getRecipientAccess().getRecipient_PartKeyword_7_0());
		match_RefEnforcement_CommaKeyword_1_q = new TokenAlias(false, true, grammarAccess.getRefEnforcementAccess().getCommaKeyword_1());
		match_RefPrivateData_CommaKeyword_1_q = new TokenAlias(false, true, grammarAccess.getRefPrivateDataAccess().getCommaKeyword_1());
		match_RefRecipientSource_CommaKeyword_1_q = new TokenAlias(false, true, grammarAccess.getRefRecipientSourceAccess().getCommaKeyword_1());
		match_RefRecipientTarget_CommaKeyword_1_q = new TokenAlias(false, true, grammarAccess.getRefRecipientTargetAccess().getCommaKeyword_1());
		match_RefRecipient_CommaKeyword_1_q = new TokenAlias(false, true, grammarAccess.getRefRecipientAccess().getCommaKeyword_1());
		match_RefService_CommaKeyword_1_q = new TokenAlias(false, true, grammarAccess.getRefServiceAccess().getCommaKeyword_1());
		match_Retention_RefersToEnforcementKeyword_12_0_q = new TokenAlias(false, true, grammarAccess.getRetentionAccess().getRefersToEnforcementKeyword_12_0());
		match_Retention_RefersToPrivateDataKeyword_10_0_q = new TokenAlias(false, true, grammarAccess.getRetentionAccess().getRefersToPrivateDataKeyword_10_0());
		match_Retention_RefersToServiceKeyword_11_0_q = new TokenAlias(false, true, grammarAccess.getRetentionAccess().getRefersToServiceKeyword_11_0());
		match_ServicePart_CommaKeyword_1_q = new TokenAlias(false, true, grammarAccess.getServicePartAccess().getCommaKeyword_1());
		match_Service_RefersToPrivateDataKeyword_6_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getRefersToPrivateDataKeyword_6_0());
		match_Service_Service_PartKeyword_7_0_q = new TokenAlias(false, true, grammarAccess.getServiceAccess().getService_PartKeyword_7_0());
		match_Usage_RefersToEnforcementKeyword_10_0_q = new TokenAlias(false, true, grammarAccess.getUsageAccess().getRefersToEnforcementKeyword_10_0());
		match_Usage_RefersToPrivateDataKeyword_8_0_q = new TokenAlias(false, true, grammarAccess.getUsageAccess().getRefersToPrivateDataKeyword_8_0());
		match_Usage_RefersToServiceKeyword_9_0_q = new TokenAlias(false, true, grammarAccess.getUsageAccess().getRefersToServiceKeyword_9_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_Attribute_CommaKeyword_6_q.equals(syntax))
				emit_Attribute_CommaKeyword_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Collection_RefersToEnforcementKeyword_10_0_q.equals(syntax))
				emit_Collection_RefersToEnforcementKeyword_10_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Collection_RefersToPrivateDataKeyword_8_0_q.equals(syntax))
				emit_Collection_RefersToPrivateDataKeyword_8_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Collection_RefersToServiceKeyword_9_0_q.equals(syntax))
				emit_Collection_RefersToServiceKeyword_9_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Disclosure_RefersToEnforcementKeyword_13_0_q.equals(syntax))
				emit_Disclosure_RefersToEnforcementKeyword_13_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Disclosure_RefersToPrivateDataKeyword_11_0_q.equals(syntax))
				emit_Disclosure_RefersToPrivateDataKeyword_11_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Disclosure_RefersToRecipientKeyword_8_0_q.equals(syntax))
				emit_Disclosure_RefersToRecipientKeyword_8_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Disclosure_RefersToRecipientSourceKeyword_9_0_q.equals(syntax))
				emit_Disclosure_RefersToRecipientSourceKeyword_9_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Disclosure_RefersToRecipientTargetKeyword_10_0_q.equals(syntax))
				emit_Disclosure_RefersToRecipientTargetKeyword_10_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Disclosure_RefersToServiceKeyword_12_0_q.equals(syntax))
				emit_Disclosure_RefersToServiceKeyword_12_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Informative_RefersToEnforcementKeyword_10_0_q.equals(syntax))
				emit_Informative_RefersToEnforcementKeyword_10_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Informative_RefersToPrivateDataKeyword_8_0_q.equals(syntax))
				emit_Informative_RefersToPrivateDataKeyword_8_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Informative_RefersToServiceKeyword_9_0_q.equals(syntax))
				emit_Informative_RefersToServiceKeyword_9_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_RecipientPart_CommaKeyword_1_q.equals(syntax))
				emit_RecipientPart_CommaKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Recipient_Recipient_PartKeyword_7_0_q.equals(syntax))
				emit_Recipient_Recipient_PartKeyword_7_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_RefEnforcement_CommaKeyword_1_q.equals(syntax))
				emit_RefEnforcement_CommaKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_RefPrivateData_CommaKeyword_1_q.equals(syntax))
				emit_RefPrivateData_CommaKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_RefRecipientSource_CommaKeyword_1_q.equals(syntax))
				emit_RefRecipientSource_CommaKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_RefRecipientTarget_CommaKeyword_1_q.equals(syntax))
				emit_RefRecipientTarget_CommaKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_RefRecipient_CommaKeyword_1_q.equals(syntax))
				emit_RefRecipient_CommaKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_RefService_CommaKeyword_1_q.equals(syntax))
				emit_RefService_CommaKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Retention_RefersToEnforcementKeyword_12_0_q.equals(syntax))
				emit_Retention_RefersToEnforcementKeyword_12_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Retention_RefersToPrivateDataKeyword_10_0_q.equals(syntax))
				emit_Retention_RefersToPrivateDataKeyword_10_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Retention_RefersToServiceKeyword_11_0_q.equals(syntax))
				emit_Retention_RefersToServiceKeyword_11_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ServicePart_CommaKeyword_1_q.equals(syntax))
				emit_ServicePart_CommaKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Service_RefersToPrivateDataKeyword_6_0_q.equals(syntax))
				emit_Service_RefersToPrivateDataKeyword_6_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Service_Service_PartKeyword_7_0_q.equals(syntax))
				emit_Service_Service_PartKeyword_7_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Usage_RefersToEnforcementKeyword_10_0_q.equals(syntax))
				emit_Usage_RefersToEnforcementKeyword_10_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Usage_RefersToPrivateDataKeyword_8_0_q.equals(syntax))
				emit_Usage_RefersToPrivateDataKeyword_8_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Usage_RefersToServiceKeyword_9_0_q.equals(syntax))
				emit_Usage_RefersToServiceKeyword_9_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING '}' (ambiguity) (rule end)
	 */
	protected void emit_Attribute_CommaKeyword_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo Enforcement'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=STRING 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     condition=STRING 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     condition=STRING 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     partCollection=[Collection|ID] 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     partCollection=[Collection|ID] 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     partCollection=[Collection|ID] 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refPDAll='All' 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refPDAll='All' 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refPDAll='All' 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refPrivateData+=RefPrivateData 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refPrivateData+=RefPrivateData 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refPrivateData+=RefPrivateData 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refSAll='All' (ambiguity) 'Modality' modality='Forbidden'
	 *     refSAll='All' (ambiguity) 'Modality' modality='Obligation'
	 *     refSAll='All' (ambiguity) 'Modality' modality='Permitted'
	 *     refService+=RefService (ambiguity) 'Modality' modality='Forbidden'
	 *     refService+=RefService (ambiguity) 'Modality' modality='Obligation'
	 *     refService+=RefService (ambiguity) 'Modality' modality='Permitted'
	 */
	protected void emit_Collection_RefersToEnforcementKeyword_10_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo PrivateData'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=STRING (ambiguity) 'RefersTo Service' refSAll='All'
	 *     condition=STRING (ambiguity) 'RefersTo Service' refService+=RefService
	 *     condition=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     condition=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     condition=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     condition=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     condition=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     partCollection=[Collection|ID] (ambiguity) 'RefersTo Service' refSAll='All'
	 *     partCollection=[Collection|ID] (ambiguity) 'RefersTo Service' refService+=RefService
	 *     partCollection=[Collection|ID] (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     partCollection=[Collection|ID] (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     partCollection=[Collection|ID] (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     partCollection=[Collection|ID] (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     partCollection=[Collection|ID] (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 */
	protected void emit_Collection_RefersToPrivateDataKeyword_8_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo Service'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     condition=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     condition=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     condition=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     condition=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     partCollection=[Collection|ID] 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     partCollection=[Collection|ID] 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     partCollection=[Collection|ID] 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     partCollection=[Collection|ID] 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     partCollection=[Collection|ID] 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 */
	protected void emit_Collection_RefersToServiceKeyword_9_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo Enforcement'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refPDAll='All' 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refPDAll='All' 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refPDAll='All' 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refPrivateData+=RefPrivateData 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refPrivateData+=RefPrivateData 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refPrivateData+=RefPrivateData 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refRAll='All' 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refRAll='All' 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refRAll='All' 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refRSAll='All' 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refRSAll='All' 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refRSAll='All' 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refRTAll='All' 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refRTAll='All' 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refRTAll='All' 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refRecipientSource+=RefRecipientSource 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refRecipientSource+=RefRecipientSource 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refRecipientSource+=RefRecipientSource 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refRecipientTarget+=RefRecipientTarget 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refRecipientTarget+=RefRecipientTarget 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refRecipientTarget+=RefRecipientTarget 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refSAll='All' (ambiguity) 'Modality' modality='Forbidden'
	 *     refSAll='All' (ambiguity) 'Modality' modality='Obligation'
	 *     refSAll='All' (ambiguity) 'Modality' modality='Permitted'
	 *     refService+=RefService (ambiguity) 'Modality' modality='Forbidden'
	 *     refService+=RefService (ambiguity) 'Modality' modality='Obligation'
	 *     refService+=RefService (ambiguity) 'Modality' modality='Permitted'
	 */
	protected void emit_Disclosure_RefersToEnforcementKeyword_13_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo PrivateData'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service' refSAll='All'
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service' refService+=RefService
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service' refSAll='All'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service' refService+=RefService
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRAll='All' 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service' refSAll='All'
	 *     refRAll='All' 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service' refService+=RefService
	 *     refRAll='All' 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     refRAll='All' 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRAll='All' 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRAll='All' 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRAll='All' 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRSAll='All' 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service' refSAll='All'
	 *     refRSAll='All' 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service' refService+=RefService
	 *     refRSAll='All' 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     refRSAll='All' 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRSAll='All' 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRSAll='All' 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRSAll='All' 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRTAll='All' (ambiguity) 'RefersTo Service' refSAll='All'
	 *     refRTAll='All' (ambiguity) 'RefersTo Service' refService+=RefService
	 *     refRTAll='All' (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     refRTAll='All' (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRTAll='All' (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRTAll='All' (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRTAll='All' (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service' refSAll='All'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service' refService+=RefService
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRecipientSource+=RefRecipientSource 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service' refSAll='All'
	 *     refRecipientSource+=RefRecipientSource 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service' refService+=RefService
	 *     refRecipientSource+=RefRecipientSource 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     refRecipientSource+=RefRecipientSource 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRecipientSource+=RefRecipientSource 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRecipientSource+=RefRecipientSource 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRecipientSource+=RefRecipientSource 'RefersTo Recipient-Target'? (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRecipientTarget+=RefRecipientTarget (ambiguity) 'RefersTo Service' refSAll='All'
	 *     refRecipientTarget+=RefRecipientTarget (ambiguity) 'RefersTo Service' refService+=RefService
	 *     refRecipientTarget+=RefRecipientTarget (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     refRecipientTarget+=RefRecipientTarget (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRecipientTarget+=RefRecipientTarget (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRecipientTarget+=RefRecipientTarget (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRecipientTarget+=RefRecipientTarget (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 */
	protected void emit_Disclosure_RefersToPrivateDataKeyword_11_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo Recipient'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=STRING (ambiguity) 'RefersTo Recipient-Source' refRSAll='All'
	 *     condition=STRING (ambiguity) 'RefersTo Recipient-Source' refRecipientSource+=RefRecipientSource
	 *     condition=STRING (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target' refRTAll='All'
	 *     condition=STRING (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target' refRecipientTarget+=RefRecipientTarget
	 *     condition=STRING (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData' refPDAll='All'
	 *     condition=STRING (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData' refPrivateData+=RefPrivateData
	 *     condition=STRING (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service' refSAll='All'
	 *     condition=STRING (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service' refService+=RefService
	 *     condition=STRING (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     condition=STRING (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     condition=STRING (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     condition=STRING (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     condition=STRING (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     partDisclosure=[Disclosure|ID] (ambiguity) 'RefersTo Recipient-Source' refRSAll='All'
	 *     partDisclosure=[Disclosure|ID] (ambiguity) 'RefersTo Recipient-Source' refRecipientSource+=RefRecipientSource
	 *     partDisclosure=[Disclosure|ID] (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target' refRTAll='All'
	 *     partDisclosure=[Disclosure|ID] (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target' refRecipientTarget+=RefRecipientTarget
	 *     partDisclosure=[Disclosure|ID] (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData' refPDAll='All'
	 *     partDisclosure=[Disclosure|ID] (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData' refPrivateData+=RefPrivateData
	 *     partDisclosure=[Disclosure|ID] (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service' refSAll='All'
	 *     partDisclosure=[Disclosure|ID] (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service' refService+=RefService
	 *     partDisclosure=[Disclosure|ID] (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     partDisclosure=[Disclosure|ID] (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     partDisclosure=[Disclosure|ID] (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     partDisclosure=[Disclosure|ID] (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     partDisclosure=[Disclosure|ID] (ambiguity) 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 */
	protected void emit_Disclosure_RefersToRecipientKeyword_8_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo Recipient-Source'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=STRING 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target' refRTAll='All'
	 *     condition=STRING 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target' refRecipientTarget+=RefRecipientTarget
	 *     condition=STRING 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData' refPDAll='All'
	 *     condition=STRING 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData' refPrivateData+=RefPrivateData
	 *     condition=STRING 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service' refSAll='All'
	 *     condition=STRING 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service' refService+=RefService
	 *     condition=STRING 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     condition=STRING 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     condition=STRING 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     condition=STRING 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     condition=STRING 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target' refRTAll='All'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target' refRecipientTarget+=RefRecipientTarget
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData' refPDAll='All'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData' refPrivateData+=RefPrivateData
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service' refSAll='All'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service' refService+=RefService
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRAll='All' (ambiguity) 'RefersTo Recipient-Target' refRTAll='All'
	 *     refRAll='All' (ambiguity) 'RefersTo Recipient-Target' refRecipientTarget+=RefRecipientTarget
	 *     refRAll='All' (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData' refPDAll='All'
	 *     refRAll='All' (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData' refPrivateData+=RefPrivateData
	 *     refRAll='All' (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service' refSAll='All'
	 *     refRAll='All' (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service' refService+=RefService
	 *     refRAll='All' (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     refRAll='All' (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRAll='All' (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRAll='All' (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRAll='All' (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRecipient+=RefRecipient (ambiguity) 'RefersTo Recipient-Target' refRTAll='All'
	 *     refRecipient+=RefRecipient (ambiguity) 'RefersTo Recipient-Target' refRecipientTarget+=RefRecipientTarget
	 *     refRecipient+=RefRecipient (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData' refPDAll='All'
	 *     refRecipient+=RefRecipient (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData' refPrivateData+=RefPrivateData
	 *     refRecipient+=RefRecipient (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service' refSAll='All'
	 *     refRecipient+=RefRecipient (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service' refService+=RefService
	 *     refRecipient+=RefRecipient (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     refRecipient+=RefRecipient (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRecipient+=RefRecipient (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRecipient+=RefRecipient (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRecipient+=RefRecipient (ambiguity) 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 */
	protected void emit_Disclosure_RefersToRecipientSourceKeyword_9_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo Recipient-Target'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData' refPDAll='All'
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData' refPrivateData+=RefPrivateData
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service' refSAll='All'
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service' refService+=RefService
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData' refPDAll='All'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData' refPrivateData+=RefPrivateData
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service' refSAll='All'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service' refService+=RefService
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRAll='All' 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData' refPDAll='All'
	 *     refRAll='All' 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData' refPrivateData+=RefPrivateData
	 *     refRAll='All' 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service' refSAll='All'
	 *     refRAll='All' 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service' refService+=RefService
	 *     refRAll='All' 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     refRAll='All' 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRAll='All' 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRAll='All' 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRAll='All' 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRSAll='All' (ambiguity) 'RefersTo PrivateData' refPDAll='All'
	 *     refRSAll='All' (ambiguity) 'RefersTo PrivateData' refPrivateData+=RefPrivateData
	 *     refRSAll='All' (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service' refSAll='All'
	 *     refRSAll='All' (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service' refService+=RefService
	 *     refRSAll='All' (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     refRSAll='All' (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRSAll='All' (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRSAll='All' (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRSAll='All' (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData' refPDAll='All'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData' refPrivateData+=RefPrivateData
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service' refSAll='All'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service' refService+=RefService
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRecipientSource+=RefRecipientSource (ambiguity) 'RefersTo PrivateData' refPDAll='All'
	 *     refRecipientSource+=RefRecipientSource (ambiguity) 'RefersTo PrivateData' refPrivateData+=RefPrivateData
	 *     refRecipientSource+=RefRecipientSource (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service' refSAll='All'
	 *     refRecipientSource+=RefRecipientSource (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service' refService+=RefService
	 *     refRecipientSource+=RefRecipientSource (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     refRecipientSource+=RefRecipientSource (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRecipientSource+=RefRecipientSource (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRecipientSource+=RefRecipientSource (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRecipientSource+=RefRecipientSource (ambiguity) 'RefersTo PrivateData'? 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 */
	protected void emit_Disclosure_RefersToRecipientTargetKeyword_10_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo Service'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     condition=STRING 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     partDisclosure=[Disclosure|ID] 'RefersTo Recipient'? 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRAll='All' 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refRAll='All' 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRAll='All' 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRAll='All' 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRAll='All' 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRSAll='All' 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refRSAll='All' 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRSAll='All' 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRSAll='All' 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRSAll='All' 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRTAll='All' 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refRTAll='All' 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRTAll='All' 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRTAll='All' 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRTAll='All' 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRecipient+=RefRecipient 'RefersTo Recipient-Source'? 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRecipientSource+=RefRecipientSource 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refRecipientSource+=RefRecipientSource 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRecipientSource+=RefRecipientSource 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRecipientSource+=RefRecipientSource 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRecipientSource+=RefRecipientSource 'RefersTo Recipient-Target'? 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refRecipientTarget+=RefRecipientTarget 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refRecipientTarget+=RefRecipientTarget 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refRecipientTarget+=RefRecipientTarget 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refRecipientTarget+=RefRecipientTarget 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refRecipientTarget+=RefRecipientTarget 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 */
	protected void emit_Disclosure_RefersToServiceKeyword_12_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo Enforcement'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=STRING 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     condition=STRING 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     condition=STRING 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     partInformative=[Informative|ID] 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     partInformative=[Informative|ID] 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     partInformative=[Informative|ID] 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refPDAll='All' 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refPDAll='All' 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refPDAll='All' 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refPrivateData+=RefPrivateData 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refPrivateData+=RefPrivateData 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refPrivateData+=RefPrivateData 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refSAll='All' (ambiguity) 'Modality' modality='Forbidden'
	 *     refSAll='All' (ambiguity) 'Modality' modality='Obligation'
	 *     refSAll='All' (ambiguity) 'Modality' modality='Permitted'
	 *     refService+=RefService (ambiguity) 'Modality' modality='Forbidden'
	 *     refService+=RefService (ambiguity) 'Modality' modality='Obligation'
	 *     refService+=RefService (ambiguity) 'Modality' modality='Permitted'
	 */
	protected void emit_Informative_RefersToEnforcementKeyword_10_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo PrivateData'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=STRING (ambiguity) 'RefersTo Service' refSAll='All'
	 *     condition=STRING (ambiguity) 'RefersTo Service' refService+=RefService
	 *     condition=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     condition=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     condition=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     condition=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     condition=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     partInformative=[Informative|ID] (ambiguity) 'RefersTo Service' refSAll='All'
	 *     partInformative=[Informative|ID] (ambiguity) 'RefersTo Service' refService+=RefService
	 *     partInformative=[Informative|ID] (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     partInformative=[Informative|ID] (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     partInformative=[Informative|ID] (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     partInformative=[Informative|ID] (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     partInformative=[Informative|ID] (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 */
	protected void emit_Informative_RefersToPrivateDataKeyword_8_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo Service'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     condition=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     condition=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     condition=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     condition=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     partInformative=[Informative|ID] 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     partInformative=[Informative|ID] 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     partInformative=[Informative|ID] 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     partInformative=[Informative|ID] 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     partInformative=[Informative|ID] 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 */
	protected void emit_Informative_RefersToServiceKeyword_9_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     recipientPart=[Recipient|ID] (ambiguity) (rule end)
	 */
	protected void emit_RecipientPart_CommaKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Recipient_Part'?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING (ambiguity) 'Scope' scope='External'
	 *     description=STRING (ambiguity) 'Scope' scope='Internal'
	 *     description=STRING (ambiguity) 'Scope' scope='Internal/External'
	 */
	protected void emit_Recipient_Recipient_PartKeyword_7_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     refEnforcement=[Enforcement|ID] (ambiguity) (rule end)
	 */
	protected void emit_RefEnforcement_CommaKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     refPrivateData=[PrivateData|ID] (ambiguity) (rule end)
	 */
	protected void emit_RefPrivateData_CommaKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     refRecipientSource=[Recipient|ID] (ambiguity) (rule end)
	 */
	protected void emit_RefRecipientSource_CommaKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     refRecipientTarget=[Recipient|ID] (ambiguity) (rule end)
	 */
	protected void emit_RefRecipientTarget_CommaKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     refRecipient=[Recipient|ID] (ambiguity) (rule end)
	 */
	protected void emit_RefRecipient_CommaKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     refService=[Service|ID] (ambiguity) (rule end)
	 */
	protected void emit_RefService_CommaKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo Enforcement'?
	 *
	 * This ambiguous syntax occurs at:
	 *     period=STRING 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     period=STRING 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     period=STRING 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refPDAll='All' 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refPDAll='All' 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refPDAll='All' 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refPrivateData+=RefPrivateData 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refPrivateData+=RefPrivateData 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refPrivateData+=RefPrivateData 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refSAll='All' (ambiguity) 'Modality' modality='Forbidden'
	 *     refSAll='All' (ambiguity) 'Modality' modality='Obligation'
	 *     refSAll='All' (ambiguity) 'Modality' modality='Permitted'
	 *     refService+=RefService (ambiguity) 'Modality' modality='Forbidden'
	 *     refService+=RefService (ambiguity) 'Modality' modality='Obligation'
	 *     refService+=RefService (ambiguity) 'Modality' modality='Permitted'
	 */
	protected void emit_Retention_RefersToEnforcementKeyword_12_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo PrivateData'?
	 *
	 * This ambiguous syntax occurs at:
	 *     period=STRING (ambiguity) 'RefersTo Service' refSAll='All'
	 *     period=STRING (ambiguity) 'RefersTo Service' refService+=RefService
	 *     period=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     period=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     period=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     period=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     period=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 */
	protected void emit_Retention_RefersToPrivateDataKeyword_10_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo Service'?
	 *
	 * This ambiguous syntax occurs at:
	 *     period=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     period=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     period=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     period=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     period=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 */
	protected void emit_Retention_RefersToServiceKeyword_11_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     servicePart=[Service|ID] (ambiguity) (rule end)
	 */
	protected void emit_ServicePart_CommaKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo PrivateData'?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING (ambiguity) 'Service_Part' servicePart+=ServicePart
	 *     description=STRING (ambiguity) 'Service_Part'? '}' (rule end)
	 *     serviceName=STRING (ambiguity) 'Service_Part' servicePart+=ServicePart
	 *     serviceName=STRING (ambiguity) 'Service_Part'? '}' (rule end)
	 */
	protected void emit_Service_RefersToPrivateDataKeyword_6_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Service_Part'?
	 *
	 * This ambiguous syntax occurs at:
	 *     description=STRING 'RefersTo PrivateData'? (ambiguity) '}' (rule end)
	 *     refPDAll='All' (ambiguity) '}' (rule end)
	 *     refPrivateData+=RefPrivateData (ambiguity) '}' (rule end)
	 *     serviceName=STRING 'RefersTo PrivateData'? (ambiguity) '}' (rule end)
	 */
	protected void emit_Service_Service_PartKeyword_7_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo Enforcement'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=STRING 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     condition=STRING 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     condition=STRING 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     partUsage=[Usage|ID] 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     partUsage=[Usage|ID] 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     partUsage=[Usage|ID] 'RefersTo PrivateData'? 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refPDAll='All' 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refPDAll='All' 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refPDAll='All' 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refPrivateData+=RefPrivateData 'RefersTo Service'? (ambiguity) 'Modality' modality='Forbidden'
	 *     refPrivateData+=RefPrivateData 'RefersTo Service'? (ambiguity) 'Modality' modality='Obligation'
	 *     refPrivateData+=RefPrivateData 'RefersTo Service'? (ambiguity) 'Modality' modality='Permitted'
	 *     refSAll='All' (ambiguity) 'Modality' modality='Forbidden'
	 *     refSAll='All' (ambiguity) 'Modality' modality='Obligation'
	 *     refSAll='All' (ambiguity) 'Modality' modality='Permitted'
	 *     refService+=RefService (ambiguity) 'Modality' modality='Forbidden'
	 *     refService+=RefService (ambiguity) 'Modality' modality='Obligation'
	 *     refService+=RefService (ambiguity) 'Modality' modality='Permitted'
	 */
	protected void emit_Usage_RefersToEnforcementKeyword_10_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo PrivateData'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=STRING (ambiguity) 'RefersTo Service' refSAll='All'
	 *     condition=STRING (ambiguity) 'RefersTo Service' refService+=RefService
	 *     condition=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     condition=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     condition=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     condition=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     condition=STRING (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     partUsage=[Usage|ID] (ambiguity) 'RefersTo Service' refSAll='All'
	 *     partUsage=[Usage|ID] (ambiguity) 'RefersTo Service' refService+=RefService
	 *     partUsage=[Usage|ID] (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEAll='All'
	 *     partUsage=[Usage|ID] (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     partUsage=[Usage|ID] (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     partUsage=[Usage|ID] (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     partUsage=[Usage|ID] (ambiguity) 'RefersTo Service'? 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 */
	protected void emit_Usage_RefersToPrivateDataKeyword_8_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'RefersTo Service'?
	 *
	 * This ambiguous syntax occurs at:
	 *     condition=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     condition=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     condition=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     condition=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     condition=STRING 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     partUsage=[Usage|ID] 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     partUsage=[Usage|ID] 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     partUsage=[Usage|ID] 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     partUsage=[Usage|ID] 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     partUsage=[Usage|ID] 'RefersTo PrivateData'? (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refPDAll='All' (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement' refEAll='All'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement' refEnforcement+=RefEnforcement
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Forbidden'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Obligation'
	 *     refPrivateData+=RefPrivateData (ambiguity) 'RefersTo Enforcement'? 'Modality' modality='Permitted'
	 */
	protected void emit_Usage_RefersToServiceKeyword_9_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
